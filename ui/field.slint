import { FieldTile, FieldData } from "./field_tile.slint";

export global FieldAdapter {
	in-out property <[FieldData]> field_top;
	in-out property <[FieldData]> field_right;
	in-out property <[FieldData]> field_left;
	in-out property <[FieldData]> field_bottom;

	out property <int> tiles_count_by_side: field_left.length;
	in-out property <int> number_of_tiles;

	// Decor vars
	in-out property <string> main_info_title;

	// Player vars
	in-out property <int> player_loc_id;
	in-out property <bool> player_on_hor;
	in-out property <bool> player_on_ver;
}

export component Field inherits Rectangle {
	in property <length> now_width;
	in property <length> now_height;

	property <length> minimal_side: min(now_height, now_width);
	property <length> tiles_size_height: now_height / FieldAdapter.tiles_count_by_side;
	property <length> tiles_size_width: now_width / FieldAdapter.tiles_count_by_side;
	property <length> center_layout_width: now_width / 2;

	property <length> tiles_size: min(tiles_size_width, tiles_size_height);
	property <length> text_size: max(tiles_size_width, tiles_size_height);

	property <length> player_size: tiles_size / 2;

	out property <length> player_x: calc_player_x(now_width);
	out property <length> player_y: calc_player_y(now_height);

	// Field and space inside field
	field_layout := HorizontalLayout {
		alignment: center;
		left_field_layout := VerticalLayout {
			for filed_data in FieldAdapter.field_left: FieldTile {
				FieldTile {
					min-width: tiles_size_width;
					min-height: tiles_size;
					field_data: filed_data;
					text_size: text_size;
				}
			}
		}

		center_field_layout := VerticalLayout {
			min-width: center_layout_width;
			alignment: space-between;
			HorizontalLayout{
				for filed_data in FieldAdapter.field_top: FieldTile {
					FieldTile {
						min-width: tiles_size_width;
						min-height: tiles_size_height;
						field_data: filed_data;
						text_size: text_size;
					}
				}
			}
			HorizontalLayout{
				Rectangle {
					preferred-height: now_height - 2 * tiles_size_height;
					border-width: 2px;
					border-color: black;
					Text {
						text: FieldAdapter.main_info_title;
						vertical-alignment: center;
						horizontal-alignment: center;
						font-weight: 600;
						font-size: minimal_side / 15;
					}
				}
			}
			HorizontalLayout{
				for filed_data in FieldAdapter.field_bottom: FieldTile {
					FieldTile {
						min-width: tiles_size_width;
						min-height: tiles_size_height;
						field_data: filed_data;
						text_size: text_size;
					}
				}
			}
		}

		right_field_layout := VerticalLayout {
			for filed_data in FieldAdapter.field_right: FieldTile {
				FieldTile {
					min-width: tiles_size_width;
					min-height: tiles_size;
					field_data: filed_data;
					text_size: text_size;
				}
			}
		}
	}

	// Player
	Rectangle {
		x: player_x;
		y: player_y;
		width: player_size;
		height: player_size;
		background: green;
		border-width: 1px;
		border-color: black;
		border-radius: self.width / 2;
	}

	public pure function calc_player_x(window_wight: length) -> length {
		if FieldAdapter.player_loc_id < FieldAdapter.number_of_tiles / 2 {
			if FieldAdapter.player_on_ver {
				return center_field_layout.x - tiles_size_width / 2;
			}
			return center_field_layout.x + (mod(FieldAdapter.player_loc_id, FieldAdapter.tiles_count_by_side) * tiles_size_width) + tiles_size_width / 2;
		} else {
			if FieldAdapter.player_on_ver {
				return center_field_layout.x + center_field_layout.width + tiles_size / 2;
			}
			return center_field_layout.x + center_field_layout.width - (mod(FieldAdapter.player_loc_id, FieldAdapter.tiles_count_by_side * 3 - 3) * tiles_size_width) + tiles_size_width / 2;
		}
	}

	public pure function calc_player_y(window_height: length) -> length {
		if FieldAdapter.player_loc_id <= FieldAdapter.number_of_tiles / 2 && FieldAdapter.player_loc_id != 0 {
			if FieldAdapter.player_on_hor {
				return center_field_layout.y + tiles_size_height / 2;
			}
			return left_field_layout.y + left_field_layout.height - (mod(FieldAdapter.player_loc_id, FieldAdapter.tiles_count_by_side) * tiles_size_height) - tiles_size_height / 2;
		} else {
			if FieldAdapter.player_on_hor {
				return center_field_layout.y + center_field_layout.height - tiles_size / 2;
			}
			return left_field_layout.y + (mod(FieldAdapter.player_loc_id, FieldAdapter.number_of_tiles / 2) * tiles_size_height) + tiles_size_height / 2;
		}
	}
}
