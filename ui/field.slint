import { Button } from "std-widgets.slint";

import { FieldTile } from "./field_tile.slint";
import { FieldTilesData, FieldMainData, DiceRoll } from "./field_data.slint";

import { InfoPanel } from "./info_panel.slint";
import { InfoPanelAdapter } from "./adapters.slint";

export struct HelpData {
	help_header: string,
	help_text: string,
}

export struct ListData {
	list_name: string,
	list_elements: [string],
}

export struct SpecialDice {
	state: string,
	condition_id: int,
}

export struct Condition {
	condition_id: int,
	rule: string,
}

export global FieldAdapter {
	// Tiles info
	in-out property <[FieldTilesData]> field_top;
	in-out property <[FieldTilesData]> field_right;
	in-out property <[FieldTilesData]> field_left;
	in-out property <[FieldTilesData]> field_bottom;

	out property <int> tiles_count_by_side: field_left.length;
	in-out property <int> number_of_tiles;

	// Decor vars
	in-out property <string> main_info_title;
	in-out property <[HelpData]> help_data;

	// Turn vars
	in-out property <[DiceRoll]> base_dice;
	in-out property <[DiceRoll]> override_dice;
	in-out property <[DiceRoll]> add_dice;

	// Statice lists
	in property <int> conditions_offset;
	in-out property <[Condition]> conditions;
	in-out property <[ListData]> lists;
	in-out property <[SpecialDice]> special_dices;

	// Player vars
	in-out property <[int]> conditions_queue; 
	in-out property <int> player_loc_id;
	in-out property <int> player_drops;
	in-out property <int> player_half_moves;
	in-out property <bool> player_on_hor;
	in-out property <bool> player_on_ver;

	in-out property <string> player_save_file;

	callback roll_list_item(ListData) -> string;
}

export component Field inherits Rectangle {
	in property <length> now_width;
	in property <length> now_height;

	property <length> minimal_side: min(now_height, now_width);
	property <length> tiles_size_height: now_height / FieldAdapter.tiles_count_by_side;
	property <length> tiles_size_width: now_width / FieldAdapter.tiles_count_by_side;
	property <length> center_layout_width: now_width / 2;

	property <length> tiles_size: min(tiles_size_width, tiles_size_height);
	property <length> text_size: max(tiles_size_width, tiles_size_height) / 8;

	property <length> player_size: tiles_size / 2;

	out property <length> player_x: calc_player_x(now_width);
	out property <length> player_y: calc_player_y(now_height);

	// Field and space inside field
	field_layout := HorizontalLayout {
		alignment: center;
		left_field_layout := VerticalLayout {
			for filed_data in FieldAdapter.field_left: FieldTile {
				FieldTile {
					min-width: tiles_size_width;
					max-height: tiles_size_height;
					field_data: filed_data;
					text_size: text_size;
				}
			}
		}

		center_field_layout := VerticalLayout {
			alignment: center;
			min-width: center_layout_width;
			HorizontalLayout {
				for filed_data in FieldAdapter.field_top: FieldTile {
					FieldTile {
						min-width: tiles_size_width;
						min-height: tiles_size_height;
						max-height: tiles_size_height;
						field_data: filed_data;
						text_size: text_size;
					}
				}
			}
			HorizontalLayout {
				Rectangle {
					width: now_width / (FieldAdapter.tiles_count_by_side - 2);
					background: gray;
					VerticalLayout {
						alignment: center;

						Text {
							horizontal-alignment: center;
							font-size: text_size;
							font-weight: 600;
							text: "Help";
						}

						for now_help_data in FieldAdapter.help_data: Button {
							text: now_help_data.help_header;
							x: parent.width / 10;
							width: parent.width * 4 / 5;
							clicked => {
								InfoPanelAdapter.any_header = now_help_data.help_header;
								InfoPanelAdapter.any_text = now_help_data.help_text;
								InfoPanelAdapter.panel_mode = 3;
							}
						}

						Text {
							horizontal-alignment: center;
							font-size: text_size;
							font-weight: 600;
							text: "\nLists";
						}

						for now_list_data in FieldAdapter.lists: Button {
							text: now_list_data.list_name;
							x: parent.width / 10;
							width: parent.width * 4 / 5;
							clicked => {
								InfoPanelAdapter.list_name = now_list_data.list_name;
								InfoPanelAdapter.list_roll = FieldAdapter.roll_list_item(now_list_data);
								InfoPanelAdapter.panel_mode = 4;
							}
						}
					}
				}
				VerticalLayout {
					Rectangle {
						preferred-height: (now_height - 2 * tiles_size_height) / 2;
						background: gray;
						VerticalLayout {
							alignment: space-around;
							Text {
								text: FieldAdapter.main_info_title;
								vertical-alignment: center;
								horizontal-alignment: center;
								font-weight: 600;
								font-size: minimal_side / 15;
							}

							HorizontalLayout {
								alignment: space-around;
								Text {
									text: "Drops: " + FieldAdapter.player_drops;
									vertical-alignment: center;
									horizontal-alignment: center;
									font-weight: 600;
									font-size: minimal_side / 30;
								}

								Text {
									text: "Half-Moves: " + FieldAdapter.player_half_moves;
									vertical-alignment: center;
									horizontal-alignment: center;
									font-weight: 600;
									font-size: minimal_side / 30;
								}
							}
						}
					}

					InfoPanel {
						panel_minimal_side: min(parent.width, parent.height);
						panel_width: parent.width;
						normal_text_size: text_size;
						preferred-height: (now_height - 2 * tiles_size_height) / 2;
					}
				}
				Rectangle {
					width: now_width / (FieldAdapter.tiles_count_by_side - 2);
					background: gray;
				}
			}
			HorizontalLayout {
				for filed_data in FieldAdapter.field_bottom: FieldTile {
					FieldTile {
						min-width: tiles_size_width;
						min-height: tiles_size_height;
						max-height: tiles_size_height;
						field_data: filed_data;
						text_size: text_size;
					}
				}
			}
		}

		right_field_layout := VerticalLayout {
			for filed_data in FieldAdapter.field_right: FieldTile {
				FieldTile {
					min-width: tiles_size_width;
					max-height: tiles_size_height;
					field_data: filed_data;
					text_size: text_size;
				}
			}
		}
	}

	// Player
	Rectangle {
		x: player_x;
		y: player_y;
		width: player_size;
		height: player_size;
		background: green;
		border-width: 1px;
		border-color: black;
		border-radius: self.width / 2;
	}

	public pure function calc_player_x(window_wight: length) -> length {
		if FieldAdapter.player_loc_id < FieldAdapter.number_of_tiles / 2 {
			if FieldAdapter.player_on_ver {
				return center_field_layout.x - tiles_size_width / 2;
			}
			return center_field_layout.x + (mod(FieldAdapter.player_loc_id, FieldAdapter.tiles_count_by_side) * tiles_size_width) + tiles_size_width / 2;
		} else {
			if FieldAdapter.player_on_ver {
				return center_field_layout.x + center_field_layout.width + tiles_size / 2;
			}
			return center_field_layout.x + center_field_layout.width - (mod(FieldAdapter.player_loc_id, FieldAdapter.tiles_count_by_side * 3 - 3) * tiles_size_width) + tiles_size_width / 2;
		}
	}

	public pure function calc_player_y(window_height: length) -> length {
		if FieldAdapter.player_loc_id <= FieldAdapter.number_of_tiles / 2 && FieldAdapter.player_loc_id != 0 {
			if FieldAdapter.player_on_hor {
				return center_field_layout.y + tiles_size_height / 2;
			}
			return left_field_layout.y + left_field_layout.height - (mod(FieldAdapter.player_loc_id, FieldAdapter.tiles_count_by_side) * tiles_size_height) - tiles_size_height / 2;
		} else {
			if FieldAdapter.player_on_hor {
				return center_field_layout.y + center_field_layout.height - tiles_size / 2;
			}
			return left_field_layout.y + (mod(FieldAdapter.player_loc_id, FieldAdapter.number_of_tiles / 2) * tiles_size_height) + tiles_size_height / 2;
		}
	}
}
