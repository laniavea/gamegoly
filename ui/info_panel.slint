import { LineEdit, Button, GroupBox, CheckBox, ScrollView } from "std-widgets.slint";
import { FieldTilesData } from "./field_data.slint";
import { LowerPanelAdapter, InfoPanelAdapter } from "./adapters.slint";

//NOTE: I couldn't find smth simular to case which operates elements.
// Only states to operate properties inside element and if else if during callback call

export component InfoPanel inherits Rectangle {
	in property <length> normal_text_size;
	in property <length> panel_minimal_side;
	in property <length> panel_width;

	// Shows tile info
	if InfoPanelAdapter.panel_mode == 1:
		Rectangle {
			background: InfoPanelAdapter.tile_data.fill-color;

			VerticalLayout {
				Text {
					text: InfoPanelAdapter.tile_data.title;
					color: white;
					horizontal-alignment: center;
					vertical-alignment: center;
					font-size: normal_text_size * 2.5;
					font-weight: 600;
					wrap: word-wrap;
					overflow: elide;
				}

				Text {
					text: InfoPanelAdapter.tile_data.description;
					horizontal-alignment: center;
					vertical-alignment: center;
					font-size: normal_text_size;
					wrap: word-wrap;
					overflow: elide;
				}

				for rule in InfoPanelAdapter.tile_data.rules:
					Text {
						text: rule;
						horizontal-alignment: center;
						vertical-alignment: center;
						font-size: normal_text_size;
						wrap: word-wrap;
						overflow: elide;
					}
			}
		}

	// Shows dices
	if InfoPanelAdapter.panel_mode == 2:
		Rectangle {
			background: gray;
			VerticalLayout {
				alignment: center;
				HorizontalLayout {
					alignment: space-around;
					for dice_value in InfoPanelAdapter.dices: Rectangle {
						width: panel_minimal_side / (InfoPanelAdapter.dices_count + 1);
						height: panel_minimal_side / (InfoPanelAdapter.dices_count + 1);

						border-color: black;
						border-width: 3px;

						Text {
							text: dice_value;
							font-size: parent.width / InfoPanelAdapter.dices_max_digits;
							wrap: word-wrap;
							overflow: elide;
						}
					}
				}
			}
		}

	// Shows any text with header
	if InfoPanelAdapter.panel_mode == 3:
		Rectangle {
			background: gray;
			VerticalLayout {
				alignment: center;
				spacing: normal_text_size * 2;
				Text {
					color: black;
					horizontal-alignment: center;
					vertical-alignment: center;
					font-size: normal_text_size * 1.5;
					font-weight: 600;
					wrap: word-wrap;
					overflow: elide;
					text: InfoPanelAdapter.any_header;
				}

				Text {
					text: InfoPanelAdapter.any_text;
					horizontal-alignment: center;
					vertical-alignment: center;
					font-size: normal_text_size;
					wrap: word-wrap;
					overflow: elide;
				}
			}
		}

	// Shows list rolls
	if InfoPanelAdapter.panel_mode == 4:
		Rectangle {
			background: gray;
			VerticalLayout {
				alignment: center;
				spacing: normal_text_size * 2;
				Text {
					color: black;
					horizontal-alignment: center;
					vertical-alignment: center;
					font-size: normal_text_size * 1.5;
					font-weight: 600;
					wrap: word-wrap;
					overflow: elide;
					text: InfoPanelAdapter.list_name;
				}

				Text {
					color: black;
					horizontal-alignment: center;
					vertical-alignment: center;
					font-size: normal_text_size * 1.2;
					font-weight: 500;
					wrap: word-wrap;
					overflow: elide;
					text: "  |\n\\/";
				}

				Text {
					text: InfoPanelAdapter.list_roll;
					horizontal-alignment: center;
					vertical-alignment: center;
					font-size: normal_text_size;
					wrap: word-wrap;
					overflow: elide;
				}
			}

		}

	// Shows rand by tags
	if InfoPanelAdapter.panel_mode == 5:
		Rectangle {
			background: gray;
			VerticalLayout {
				alignment: center;
				spacing: normal_text_size * 2;

				HorizontalLayout {
					alignment: space-around;
					for now_rule[i] in InfoPanelAdapter.rules_roll_list: VerticalLayout {
						alignment: center;
						spacing: normal_text_size;

						Text {
							horizontal-alignment: center;
							text: now-rule;
						}

						LineEdit {
							width: normal_text_size * 5;
							horizontal-alignment: center;
							edited(text) => {
								InfoPanelAdapter.input_roll_list[i] = text;
							}
						}
					}
				}

				Button {
					text: InfoPanelAdapter.roll_button_text;
					max-height: normal_text_size;
					clicked => {
						InfoPanelAdapter.roll_main_tag()
					}
				}
			}
		}

	if InfoPanelAdapter.panel_mode == 6:
		Rectangle {
			background: gray;
			HorizontalLayout {
				alignment: space-around;
				VerticalLayout {
					width: panel_width / 4;
					alignment: center;
					spacing: normal_text_size * 2;
					Text {
						color: black;
						horizontal-alignment: center;
						vertical-alignment: center;
						font-size: normal_text_size * 1.2;
						font-weight: 500;
						wrap: word-wrap;
						overflow: elide;
						text: "Min:";
					}

					LineEdit {
						horizontal-alignment: center;
						text: InfoPanelAdapter.min_value;
						edited(text) => {
							InfoPanelAdapter.input_roll_list[0] = text;
						}
					}

					Text {
						color: black;
						horizontal-alignment: center;
						vertical-alignment: center;
						font-size: normal_text_size / 1.5;
						font-weight: 500;
						wrap: word-wrap;
						overflow: elide;
						text: "Rolled game's num: " + InfoPanelAdapter.rolled_num;
					}

				}

				VerticalLayout {
					width: panel_width / 5;
					alignment: center;
					spacing: normal_text_size * 2;
					Button {
						text: InfoPanelAdapter.roll_num_button_text;
						max-height: normal_text_size;
						clicked => {
							InfoPanelAdapter.roll_num_between()
						}
					}

					Button {
						visible: InfoPanelAdapter.rolled_num_but_v;
						text: "Continue";
						clicked => {
							InfoPanelAdapter.to_state_4()
						}
					}
				}

				VerticalLayout {
					width: panel_width / 4;
					alignment: center;
					spacing: normal_text_size * 2;
					Text {
						color: black;
						horizontal-alignment: center;
						vertical-alignment: center;
						font-size: normal_text_size * 1.2;
						font-weight: 500;
						wrap: word-wrap;
						overflow: elide;
						text: "Max:";
					}
					LineEdit {
						horizontal-alignment: center;
						text: InfoPanelAdapter.max_value;
						edited(text) => {
							InfoPanelAdapter.input_roll_list[1] = text;
						}
					}
					Text {
						color: black;
						horizontal-alignment: center;
						vertical-alignment: center;
						font-size: normal_text_size / 1.5;
						font-weight: 500;
						wrap: word-wrap;
						overflow: elide;
						text: "Rolled game's num (half-move): " + InfoPanelAdapter.rolled_num_alt;
					}
				}
			}
		}

	if InfoPanelAdapter.panel_mode == 7:
		Rectangle {
			background: gray;

			VerticalLayout {
				alignment: space-around;
				Text {
					color: black;
					horizontal-alignment: center;
					vertical-alignment: center;
					font-size: normal_text_size * 1.5;
					font-weight: 500;
					wrap: word-wrap;
					overflow: elide;
					text: "Mark used modificators";
				}

				HorizontalLayout {
					alignment: space-around;
					height: panel_minimal_side / 3;
					ScrollView {
						width: panel_width / 3;
						height: panel_minimal_side / 3;
						viewport-width: self.width;
						viewport-height: max(self.height, self.height * (LowerPanelAdapter.player_add_tags.length / 6));
						GroupBox {
							y: 0;
							title: "Additional tags";
							VerticalLayout {
								for now_add_tag[i] in LowerPanelAdapter.player_add_tags: CheckBox {
									text: now_add_tag;
									toggled => {
										InfoPanelAdapter.used_add_tags[i] = !InfoPanelAdapter.used_add_tags[i];
									}
								}
							}
						}
					}

					ScrollView {
						width: panel_width / 3;
						height: panel_minimal_side / 3;
						viewport-width: self.width;
						viewport-height: max(self.height, self.height * (LowerPanelAdapter.player_special.length / 6));
						toggled_specials := GroupBox {
							y: 0;
							title: "Special";
							VerticalLayout {
								for now_special[i] in LowerPanelAdapter.player_special: CheckBox {
									text: now_special;
									toggled => {
										InfoPanelAdapter.used_specials[i] = !InfoPanelAdapter.used_specials[i];
									}
								}
							}
						}
					}
				}

				CheckBox {
					x: panel_width / 2;
					text: "Half-move used";
					toggled => {
						InfoPanelAdapter.half_move_used = !InfoPanelAdapter.half_move_used
					}
				}

				Button {
					text: "Continue";
					clicked => {
						InfoPanelAdapter.modifers_end()
					}
				}
			}
		}
		

	//TODO: Remove test panel, change startup panel to tile where player now is.
	if InfoPanelAdapter.panel_mode == 10000:
		Rectangle {
			background: gray;
			Text {
				font-size: normal_text_size;
				text: "Will be removed later";
			}
		}
}
