import { LineEdit, Button } from "std-widgets.slint";
import { FieldTilesData } from "./field_data.slint";

export global InfoPanelAdapter {
	in_out property <int> panel_mode;

	in-out property <FieldTilesData> tile_data;

	in-out property <int> dices_count;
	in-out property <int> dices_max_digits;
	in-out property <[int]> dices;

	in-out property <string> any_header;
	in-out property <string> any_text;

	in-out property <string> list_name;
	in-out property <string> list_roll;

	in-out property <[string]> rules_roll_list;
	in-out property <[string]> input_roll_list: ["", "", "", "", ""];
	in property <string> roll_button_text: "Roll tag";

	in-out property <int> min_value: 0;
	in-out property <int> max_value: 100;
	in property <string> roll_num_button_text: "Roll game's number";
	in-out property <string> rolled_num: "None";
	in-out property <string> rolled_num_alt: "None";
	in-out property <bool> rolled_num_but_v: false;

	callback roll_main_tag();
	callback roll_num_between();
}

//NOTE: I couldn't find smth simular to case which operates elements.
// Only states to operate properties inside element and if else if during callback call

export component InfoPanel inherits Rectangle {
	in property <length> normal_text_size;
	in property <length> panel_minimal_side;

	// Shows tile info
	if InfoPanelAdapter.panel_mode == 1:
		Rectangle {
			background: InfoPanelAdapter.tile_data.fill-color;

			VerticalLayout {
				Text {
					text: InfoPanelAdapter.tile_data.title;
					color: white;
					horizontal-alignment: center;
					vertical-alignment: center;
					font-size: normal_text_size * 2.5;
					font-weight: 600;
					wrap: word-wrap;
					overflow: elide;
				}

				Text {
					text: InfoPanelAdapter.tile_data.description;
					horizontal-alignment: center;
					vertical-alignment: center;
					font-size: normal_text_size;
					wrap: word-wrap;
					overflow: elide;
				}

				for rule in InfoPanelAdapter.tile_data.rules:
					Text {
						text: rule;
						horizontal-alignment: center;
						vertical-alignment: center;
						font-size: normal_text_size;
						wrap: word-wrap;
						overflow: elide;
					}
			}
		}

	// Shows dices
	if InfoPanelAdapter.panel_mode == 2:
		Rectangle {
			background: gray;
			VerticalLayout {
				alignment: center;
				HorizontalLayout {
					alignment: space-around;
					for dice_value in InfoPanelAdapter.dices: Rectangle {
						width: panel_minimal_side / (InfoPanelAdapter.dices_count + 1);
						height: panel_minimal_side / (InfoPanelAdapter.dices_count + 1);

						border-color: black;
						border-width: 3px;

						Text {
							text: dice_value;
							font-size: parent.width / InfoPanelAdapter.dices_max_digits;
							wrap: word-wrap;
							overflow: elide;
						}
					}
				}
			}
		}

	// Shows any text with header
	if InfoPanelAdapter.panel_mode == 3:
		Rectangle {
			background: gray;
			VerticalLayout {
				alignment: center;
				spacing: normal_text_size * 2;
				Text {
					color: black;
					horizontal-alignment: center;
					vertical-alignment: center;
					font-size: normal_text_size * 1.5;
					font-weight: 600;
					wrap: word-wrap;
					overflow: elide;
					text: InfoPanelAdapter.any_header;
				}

				Text {
					text: InfoPanelAdapter.any_text;
					horizontal-alignment: center;
					vertical-alignment: center;
					font-size: normal_text_size;
					wrap: word-wrap;
					overflow: elide;
				}
			}
		}

	// Shows list rolls
	if InfoPanelAdapter.panel_mode == 4:
		Rectangle {
			background: gray;
			VerticalLayout {
				alignment: center;
				spacing: normal_text_size * 2;
				Text {
					color: black;
					horizontal-alignment: center;
					vertical-alignment: center;
					font-size: normal_text_size * 1.5;
					font-weight: 600;
					wrap: word-wrap;
					overflow: elide;
					text: InfoPanelAdapter.list_name;
				}

				Text {
					color: black;
					horizontal-alignment: center;
					vertical-alignment: center;
					font-size: normal_text_size * 1.2;
					font-weight: 500;
					wrap: word-wrap;
					overflow: elide;
					text: "  |\n\\/";
				}

				Text {
					text: InfoPanelAdapter.list_roll;
					horizontal-alignment: center;
					vertical-alignment: center;
					font-size: normal_text_size;
					wrap: word-wrap;
					overflow: elide;
				}
			}

		}

	// Shows rand by tags
	if InfoPanelAdapter.panel_mode == 5:
		Rectangle {
			background: gray;
			VerticalLayout {
				alignment: center;
				spacing: normal_text_size * 2;

				HorizontalLayout {
					alignment: space-around;
					for now_rule[i] in InfoPanelAdapter.rules_roll_list: VerticalLayout {
						alignment: center;
						spacing: normal_text_size;

						Text {
							horizontal-alignment: center;
							text: now-rule;
						}

						LineEdit {
							width: normal_text_size * 5;
							horizontal-alignment: center;
							edited(text) => {
								InfoPanelAdapter.input_roll_list[i] = text;
							}
						}
					}
				}

				Button {
					text: InfoPanelAdapter.roll_button_text;
					max-height: normal_text_size;
					clicked => {
						InfoPanelAdapter.roll_main_tag()
					}
				}
			}
		}

	if InfoPanelAdapter.panel_mode == 6:
		Rectangle {
			background: gray;
			VerticalLayout {
				alignment: center;
				spacing: normal_text_size * 2;

				HorizontalLayout {
					alignment: space-around;
					VerticalLayout {
						alignment: center;
						spacing: normal_text_size * 2;
						Text {
							horizontal-alignment: center;
							text: "Min:";
						}

						LineEdit {
							width: normal_text_size * 5;
							horizontal-alignment: center;
							text: InfoPanelAdapter.min_value;
						}
					}

					Button {
						text: InfoPanelAdapter.roll_num_button_text;
						max-height: normal_text_size;
						clicked => {
							InfoPanelAdapter.roll_num_between()
						}
					}

					VerticalLayout {
						alignment: center;
						spacing: normal_text_size * 2;
						Text {
							horizontal-alignment: center;
							text: "Max:";
						}
						LineEdit {
							width: normal_text_size * 5;
							horizontal-alignment: center;
							text: InfoPanelAdapter.max_value;
						}
					}
				}

				HorizontalLayout {
					Text {
						horizontal-alignment: center;
						text: "Rolled game's num: " + InfoPanelAdapter.rolled_num;
					}

					Button {
						visible: InfoPanelAdapter.rolled_num_but_v;
						text: "Continue";
					}

					Text {
						horizontal-alignment: center;
						text: "Rolled game's num (half-move): " + InfoPanelAdapter.rolled_num_alt;
					}

				}
			}
		}
		

	//TODO: Remove test panel, change startup panel to tile where player now is.
	if InfoPanelAdapter.panel_mode == 7:
		Rectangle {
			background: gray;
			Text {
				font-size: normal_text_size;
				text: "Will be removed later";
			}
		}
}
